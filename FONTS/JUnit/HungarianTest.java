package JUnit;
import Domini.A_hungarian;

import org.junit.*;
import static org.junit.Assert.*;

public class HungarianTest {


    @BeforeClass
    public static void beforeTests() throws Exception {
        System.out.println("\nStarting executing Hungarian tests...");
    }

    @AfterClass
    public static void afterTests() throws Exception {
        System.out.println("\nTests completed, Well done!");
    }

    @Test
    public void testCostOptim() 
    {
        double [][] mat = {
            {21, 34, 31, 43},
            {20, 35, 32, 44},
            {20, 34, 33, 45},
            {21, 34, 31, 43}
        };

        double [][] mat2 = {
            {15, 20, 40, 10},
            {30, 15, 25, 15},
            {25, 30, 60, 10},
            {30, 40, 20, 20}
        };

        double [][] mat3 = {
            {1.9, 1.9, 2.9},
            {2.0, 1.6, 2.4},
            {2.0, 1.4, 2.0}
        };

        double [][] mat4 = {
            {4.3, 3.7, 8.3},
            {5.0, 3.0, 6.6},
            {5.4, 2.6, 5.4}
        };

        double [][] mat5 = {
            {1.3, 2.5, 0.6, 3.3},
            {2.0, 3.5, 3.2, 4.4},
            {1.7, 2.7, 2.5, 2.5},
            {2.1, 3.4, 0.5, 2.5}
        }; 

        double[][] mat6 = {
            {12.3, 45.6, 78.9, 56.7, 90.1, 43.2, 67.8, 21.4},
            {54.3, 87.6, 32.1, 98.7, 65.8, 21.4, 76.5, 43.2},
            {54.3, 87.6, 76.9, 32.1, 65.8, 98.7, 21.4, 65.8},
            {87.6, 54.3, 98.7, 76.5, 43.2, 21.4, 54.3, 87.6},
            {10.1, 76.9, 32.1, 65.8, 98.7, 65.8, 21.4, 76.5},
            {43.2, 54.3, 87.6, 76.9, 32.1, 65.8, 98.7, 21.4},
            {98.7, 76.5, 43.2, 21.4, 54.3, 87.6, 76.9, 32.1},
            {65.8, 21.4, 54.3, 87.6, 76.9, 32.1, 98.7, 65.8}
        };
            
        double [][] mat7 = {
            {0.3, 0.5, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.3, 0.9, 0.3, 0.6},
            {0.1, 0.2, 0.7, 0.2, 0.2, 0.3, 0.1, 0.0, 0.1, 0.9, 0.3, 0.2},
            {0.6, 0.3, 0.1, 0.4, 0.1, 0.0, 0.1, 0.1, 0.0, 0.9, 0.3, 0.1},
            {0.4, 0.3, 0.2, 0.4, 0.1, 0.2, 0.1, 0.3, 0.1, 0.2, 0.5, 0.3},
            {0.3, 0.2, 0.3, 0.5, 0.1, 0.2, 0.4, 0.6, 0.3, 0.9, 0.3, 0.4},
            {0.3, 0.1, 0.3, 0.5, 0.1, 0.2, 0.4, 0.1, 0.5, 0.9, 0.3, 0.5},
            {0.3, 0.2, 0.5, 0.5, 0.2, 0.2, 0.8, 0.2, 0.5, 0.3, 0.2, 0.1},
            {0.3, 0.2, 0.2, 0.9, 0.4, 0.3, 0.1, 0.5, 0.4, 0.9, 0.3, 0.4},
            {0.1, 0.1, 0.8, 0.2, 0.4, 0.3, 0.1, 0.2, 0.9, 0.3, 0.3, 0.5},
            {0.1, 0.3, 0.1, 0.4, 0.1, 0.9, 0.1, 0.1, 0.2, 0.9, 0.9, 0.9},
            {0.4, 0.2, 0.2, 0.4, 0.6, 0.2, 0.1, 0.3, 0.1, 0.1, 0.3, 0.1},
            {0.8, 0.2, 0.2, 0.2, 0.6, 0.2, 0.1, 0.5, 0.1, 0.1, 0.3, 0.9}
        };     

        double[][] mat8 = {
            {0.3, 0.5, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.3, 0.9, 0.3},
            {0.1, 0.2, 0.7, 0.2, 0.2, 0.3, 0.1, 0.0, 0.1, 0.9, 0.3},
            {0.6, 0.3, 0.1, 0.4, 0.1, 0.0, 0.1, 0.1, 0.0, 0.9, 0.3},
            {0.4, 0.3, 0.2, 0.4, 0.1, 0.2, 0.1, 0.3, 0.1, 0.2, 0.5},
            {0.3, 0.2, 0.3, 0.5, 0.1, 0.2, 0.4, 0.6, 0.3, 0.9, 0.3},
            {0.3, 0.1, 0.3, 0.5, 0.1, 0.2, 0.4, 0.1, 0.5, 0.9, 0.3},
            {0.3, 0.2, 0.5, 0.5, 0.2, 0.2, 0.8, 0.2, 0.5, 0.3, 0.2},
            {0.3, 0.2, 0.2, 0.9, 0.4, 0.3, 0.1, 0.5, 0.4, 0.9, 0.3},
            {0.1, 0.1, 0.8, 0.2, 0.4, 0.3, 0.1, 0.2, 0.9, 0.3, 0.3},
            {0.1, 0.3, 0.1, 0.4, 0.1, 0.9, 0.1, 0.1, 0.2, 0.9, 0.9},
            {0.4, 0.2, 0.2, 0.4, 0.6, 0.2, 0.1, 0.3, 0.1, 0.1, 0.3}
        };

        double[][] mat9 = {
            {63.3, 31.7, 22.9, 18.2, 16.4, 16.4, 17.5, 20.8, 27.9, 38.8},
            {35.2, 16.9, 13.8, 14.3, 17.8, 22.3, 28.9, 37.6, 49.3, 64.0},
            {77.0, 40.7, 31.1, 25.9, 24.9, 27.6, 33.3, 42.0, 55.3, 73.7},
            {116.6, 61.9, 45.9, 36.4, 32.9, 33.8, 38.4, 47.8, 63.6, 86.3},
            {93.3, 47.3, 35.2, 29.0, 26.6, 28.4, 33.0, 40.4, 52.9, 71.7},
            {100.4, 53.6, 40.3, 32.2, 29.4, 30.3, 34.9, 44.3, 58.5, 78.0},
            {121.4, 63.8, 47.1, 37.6, 34.1, 35.0, 39.6, 49.0, 64.8, 88.2},
            {98.3, 51.0, 37.0, 29.2, 25.4, 24.5, 26.9, 32.6, 43.2, 59.4},
            {93.4, 44.6, 32.7, 26.4, 23.3, 23.3, 25.7, 30.5, 38.4, 51.8},
            {68.1, 36.2, 27.7, 23.9, 22.9, 25.6, 31.3, 40.0, 52.4, 69.2},
        };


        double[][] mat10 = {
            {63.3, 31.7, 22.9, 18.2, 16.4},
            {35.2, 16.9, 13.8, 14.3, 17.8},
            {77.0, 40.7, 31.1, 25.9, 24.9},
            {116.6, 61.9, 45.9, 36.4, 32.9},
            {93.3, 47.3, 35.2, 29.0, 26.6}
        };

        A_hungarian alg = new A_hungarian(mat);
        double resultat = alg.getCost();
        assertEquals(128, resultat, 0.001);

        A_hungarian alg2 = new A_hungarian(mat2);
        resultat = alg2.getCost();
        assertEquals(60, resultat, 0.001);

        A_hungarian alg3 = new A_hungarian(mat3);
        resultat = alg3.getCost();
        assertEquals(5.5, resultat, 0.001);

        A_hungarian alg4 = new A_hungarian(mat4);
        resultat = alg4.getCost();
        assertEquals(12.7, resultat, 0.001);

        A_hungarian alg5 = new A_hungarian(mat5);
        resultat = alg5.getCost();
        assertEquals(7.5, resultat, 0.001);

        A_hungarian alg6 = new A_hungarian(mat6);
        resultat = alg6.getCost();
        assertEquals(181.3, resultat, 0.001);

        A_hungarian alg7 = new A_hungarian(mat7);
        resultat = alg7.getCost();
        assertEquals(1.2, resultat, 0.001);

        A_hungarian alg8 = new A_hungarian(mat8);
        resultat = alg8.getCost();
        assertEquals(1.0999, resultat, 0.001);

        A_hungarian alg9 = new A_hungarian(mat9);
        resultat = alg9.getCost();
        assertEquals(344.0999, resultat, 0.001);
        
        A_hungarian alg10 = new A_hungarian(mat10);
        resultat = alg10.getCost();
        assertEquals(159.9, resultat, 0.001);
    }

}
